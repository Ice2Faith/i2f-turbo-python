# -- coding: gbk --
'''
基本输入输出语句和注释：
输入：
	input([输入提示内容])
输出：
	print([输出内容])
单行注释：
	使用#号开头即可，通常#号后面留一个空格
	多行注释使用三引号
'''
# 字符串的标识
	# 单行字符串
	'str'
	"str"
	# 多行字符串
	'''
	str
	'''
	"""
	str
	"""
	# 区别：
	'''
	至于单引号双引号三引号的使用，常常取决于包含的字符串是否有和字符串标识符形成冲突的情况而定
	比如字符串中含有双引号，那就可以使用单引号或者三引号进行标识
	'''
# 输入语句在Py2和Py3中的差异
	'''
	Py2中的input会按照输入的类型自动转换，输入字符串需要用raw_input
	Py3中input一律按照字符串处理，使用时自己进行类型强转
	'''
# 输出语句的使用
	'''
	# 通常没有指定分割符号的时候，print中的每个输出之间使用空格分割
	print(2,3) # 2 3
	# 如果指定了分隔符sep字段，将按照分隔符进行分割
	print(2,3,sep=',') #2,3
	# 另外汉可以用end字段指定此条输出之后的结束符
	print(2,3,sep=':',end='%') # 2:3%
	# 格式化输出：
	print("%d:%s,%f"%(12,'hello',12.125))
	# 以上就是一个简单的格式化输出，使用格式为
	# print(formatString%(args))
	# 格式符号说明（其实和c语言差不多）：
	# %d %i : 十进制
	# %o :八进制
	# %e :科学计数法（会有舍入）
	# %x %X :十六，是否大小写
	# %02d :输出至少两整数，不足的用0填充
	# %#x :输出的时候带上进制（非十进制时有效）前导符号
	# %-2d :对其方式改为左对齐，默认右对齐
	# 综合案例：
	print("%04d-%02d-%02d %#x %.2f"%(2020,2,10,0x52,12.1256)) # 2020-02-10 0x52 12.12
	# 如果只有一个参数的格式化，则直接简化即可
	print("%d"%5) # 5
	print("%.2e"&12.128) # 1.21+e02 这里的2标识了小数位数和指数位数
	
	'''
# 下面这是一个使用示例
name=str(input('Please input your name:'))
print('Hello!',name,'Welcome to Python!')

# 一个输入整数，分别输出个、十、、、位
num=int(input('please input a integer:'))
while num>0:
	print(num%10)
	num//=10

